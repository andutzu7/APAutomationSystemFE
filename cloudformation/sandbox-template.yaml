AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Github configurations"
        Parameters:
          - GithubRepoName
          - ThumbprintList

Description: 'AWS CloudFormation:
  Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based
  on the region in which the stack is run.'


Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
                    t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
                    m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
                    m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge,
                    c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge,
                    g3.8xlarge,
                    r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r3.12xlarge,
                    i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge,
                    d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 95.76.16.83/32
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  HTTPLocation:
    Description: The IP address range that can be used to HTTP to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  ThumbprintList:
    Type: String
    Default: 6938fd4d98bab03faadb97b34396831e3780aea1
    Description: A thumbprint of an Open ID Connector is a SHA1 hash of the public certificate of the host

  GithubRepoName:
    Type: String
    Description: GitHub repository name Ex-TestUser/TestCodeDeploy

Mappings:
  RegionMap:
    us-east-1:
      ami: "ami-01c647eace872fc02"

Resources:
  AngularAppRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: AngularAppRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
                - "codedeploy.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
      Policies:
        -
          PolicyName: "allow-webapp-deployment-bucket-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "s3:getObject"
                Resource: !Sub arn:${AWS::Partition}:s3:::${AngularAppDeploymentBucket}/*
              -
                Effect: "Allow"
                Action:
                  - "cloudformation:DescribeStacks"
                Resource: "*"

  AngularAppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: AngularAppRole

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22 and HTTP requests via port 8080
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref 'SSHLocation'
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref 'HTTPLocation'

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      SecurityGroups: [!Ref 'InstanceSecurityGroup']
      KeyName: new-key
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - ami
      Tags:
        - Key: Name
          Value: angular-app
      IamInstanceProfile:
        Ref: AngularAppInstanceProfile
      UserData:
        "Fn::Base64":
          !Sub |
          #!/bin/bash
          
          sudo yum install -y nginx wget

          #  matches lines that start with optional whitespace characters, followed by "root," and then followed by anything
          sudo sed -i 's/^\s*root\s.*$/  root \/home\/ec2-user\/dist\/apafinance-fe;/' /etc/nginx/nginx.conf



          yum install ruby -y
          wget https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          cd /tmp
          yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          systemctl enable amazon-ssm-agent
          systemctl start amazon-ssm-agent


  AngularAppDeploymentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true


  AngularGitHubIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: AngularCodeDeployRoleforGitHub
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRoleWithWebIdentity
            Principal:
              Federated: !ImportValue ExportedIDCProvider 
            Condition:
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub repo:${GithubRepoName}:*
      MaxSessionDuration: 3600
      Description: "Github Actions role"
      Policies:

        - PolicyName: 'AngularCodeDeployRoleforGitHub-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'codedeploy:Get*'
                  - 'codedeploy:Batch*'
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:RegisterApplicationRevision'
                  - 'codedeploy:List*'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:codedeploy:*:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - 's3:putObject'
                Resource: !Sub arn:${AWS::Partition}:s3:::${AngularAppDeploymentBucket}/*

  WebappApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: AngularCodeDeployAppName
  WebappDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref WebappApplication
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      DeploymentGroupName: AngularCodeDeployGroupName
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
          - DEPLOYMENT_STOP_ON_REQUEST
      Ec2TagFilters:
          - Key: Name
            Type: KEY_AND_VALUE
            Value: angular-app


  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "codedeploy.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
      Policies:
        -
          PolicyName: allow-autoscaling
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action:
                  - ec2:RunInstances
                  - ec2:CreateTags
                  - iam:PassRole
                Resource:
                  - !Sub 'arn:${AWS::Partition}:codedeploy:*:${AWS::AccountId}:*'
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'EC2Instance'
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, AvailabilityZone]
  AngularPublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicDnsName]
  AngularPublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicIp]
  DeploymentBucket:
    Description: Deployment bucket
    Value: !Ref AngularAppDeploymentBucket
  AngularGithubIAMRoleArn:
    Description: IAM role for GitHub
    Value: !GetAtt AngularGitHubIAMRole.Arn
  DeploymentGroup:
    Description: Webapp Deployment Group
    Value: !Ref WebappDeploymentGroup
  ApplicationName:
    Description: CodeDeploy Application name
    Value: !Ref WebappApplication
